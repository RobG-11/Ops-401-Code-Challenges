# Script: 32 - Signature-based Malware Detection Part 2 of 3 - COMPLETE
# Author: Robert Gregor
# Date of latest revision: 31 MAY 23

# Objectives (PART II) - Continue developing your Python malware detection tool
    # Alter your search code to recursively scan each file and folder in the user input directory path and print it to the screen
    # For each file scanned within the scope of your search directory:
        # Generate the file’s MD5 hash using Hashlib
        # Assign the MD5 hash to a variable
        # Print variable to  screen along with timestamp, file name, file size, and complete (not symbolic) file path

# My Sources (PART II)
    # [hashlib — Secure hashes and message digests](https://docs.python.org/3/library/hashlib.html)
    # [Python Program to Find Hash of File](https://www.programiz.com/python-programming/examples/hash-file)
    # [MD5 hash in Python](https://www.geeksforgeeks.org/md5-hash-python/)
    # [MD5 update functions](https://crypto.stackexchange.com/questions/19706/md5-update-functions)
    # [Python iter()](https://www.programiz.com/python-programming/methods/built-in/iter)
    # [Difference between Python Hashlib digest() and hexdigest()](https://www.reddit.com/r/learnpython/comments/11juj7g/difference_between_python_hashlib_digest_and/)

#!/usr/bin/env python

# Import cross-platform modules
import os
import fnmatch
import hashlib
from datetime import datetime

# Define file_search function and arguements
def file_search(dir_name):
    # Initialize an empty list
    search_results = []
    # for loop iterates through directory and os.walk generates file names
    for dirpath, dirnames, filenames in os.walk(dir_name):
        # Nested loop iterates through file names in list
        for file in filenames:
            # Joins directory path with file name and stores in file_path variable
            file_path = os.path.join(dirpath, file)
            # Prints file found to terminal
            print(f"\nFile found: {file_path}")
            # Create MD5 hash object for MD5 hash computation
            md5_hash = hashlib.md5()
            # Opens file_path file in read binary mode
            with open(file_path,"rb") as f:
                # for loop reads file in 4096 byte chunks and hashes
                for byte_block in iter(lambda: f.read(4096),b""):
                    md5_hash.update(byte_block)
            # Prints results of hashing to terminal with file metadata
            print(f"MD5 Hash: {md5_hash.hexdigest()}\nTimestamp: {datetime.now()}\nFile Name: {file}\nFile Size: {os.path.getsize(file_path)}\nComplete File Path: {os.path.abspath(file_path)}")
            # Appends full path to file to search_results list
            search_results.append(file_path)  
    # Returns search_result list
    return search_results

while True:
    # Request user input for dir_name variable
    dir_name = str(input("\nPlease enter the directory for the files you would like to hash: "))
    # Declares files_found variable equal to results of file_search function
    files_found = file_search(dir_name)
    # Prints total files searched and found
    print("\nTotal files searched:", sum([len(files) for r, d, files in os.walk(dir_name)]))
    print("\nTotal files found:", len(files_found))
