# Script: 31 - Signature-based Malware Detection Part 1 of 3 - COMPLETE
# Author: Robert Gregor
# Date of latest revision: 30 MAY 23

# Objectives (PART I) - In Python, write a script that will:
    # Prompt the user to type in a file name to search for
    # Prompt the user for a directory to search in
    # Search each file in the directory by name
        # TIP: May need to perform different commands depending on  OS you’re executing script on
    # For each positive detection, print to the screen the file name and location
    # At the end of the search process
        # Print to the screen how many files were searched and how many hits were found
    # The script must successfully execute on both Ubuntu Linux 20.04 Focal Fossa and Windows 10

# My Sources (PART I)
    # [How to Find Files and Folders in Linux Using the Command Line](https://www.howtogeek.com/112674/how-to-find-files-and-folders-in-linux-using-the-command-line/)
    # [How to Use Find from the Windows Command Prompt](https://www.howtogeek.com/206097/how-to-use-find-from-the-windows-command-prompt/)
    # [fnmatch — Unix filename pattern matching](https://docs.python.org/3/library/fnmatch.html)
    # [fnmatch](https://www.php.net/manual/en/function.fnmatch.php)
    # [glob](https://www.php.net/manual/en/function.glob.php)
    # [fnmatch – Unix filename pattern matching in Python](https://www.geeksforgeeks.org/fnmatch-unix-filename-pattern-matching-python/)
    # [Python os.walk() Method](https://www.tutorialspoint.com/python/os_walk.htm)
    # [Python List append()](https://www.programiz.com/python-programming/methods/list/append)
    # [Python String join() Method](https://www.geeksforgeeks.org/python-string-join-method/)
    # [Using the len() Function in Python](https://realpython.com/len-python-function/)

#!/usr/bin/env python

# Import cross-platform modules
import os
import fnmatch

# Define file_search function and arguements
def file_search(file_name, dir_name):
    # Initialize an empty list
    search_results = []
    # for loop iterates through directory and os.walk generates file names
    for dirpath, dirnames, filenames in os.walk(dir_name):
        # Nested loop iterates through file names in list
        for file in filenames:
            # Conditional determines if current file name matches user supplied file name
            if fnmatch.fnmatch(file, file_name):
                # Joins directory path with file name and appends to search_results list
                search_results.append(os.path.join(dirpath, file))
    # Returns search_result list
    return search_results

while True:
    # Request user input for file_name and dir_name variables
    file_name = str(input("\nPlease enter the name of the file you would like to search for: "))
    dir_name = str(input("\nPlease enter the name of the directory you would like to search in: "))
    # Declares files_found variable equal to results of file_search function
    files_found = file_search(file_name, dir_name)
    # for loop iterates through files in files_found list
    for file in files_found:
        print()
        # Prints found file paths to terminal
        print(f"File found: {file}")
    # Prints total files searched and found
    print("\nTotal files searched:", sum([len(files) for r, d, files in os.walk(dir_name)]))
    print("\nTotal files found:", len(files_found))
