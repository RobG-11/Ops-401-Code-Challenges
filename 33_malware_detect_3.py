# Script: 33 - Signature-based Malware Detection Part 3 of 3 - INCOMPLETE
# Author: Robert Gregor
# Date of latest revision: 01 JUL 23

# Staging (PART III)
    # Copy and paste the demo script into a new Python file on your system
    # Download virustotal-search.py and place it in the same folder as the demo Python script
    # Sign up for an account at virustotal.com to get a free API key
    # To query VirusTotal API, need to set API key as environment variable to avoid hard-coding
        # You can always hard-code it at first for testing, but don’t leave it that way!
    # Set the variable hash to whatever MD5 hash you wish VirusTotal to evaluate.

# Objectives (PART III) - Add to your malware detection script features to:
    # Successfully connect to VirusTotal API
    # Automatically compare target file’s md5 hash with hash values of entries on VirusTotal API
    # Print to the screen the number of positives detected and total files scanned
    # Script must successfully execute on both Ubuntu Linux 20.04 Focal Fossa and Windows 10

# My Sources (PART III)
    # [VirusTotal API v3 Overview](https://developers.virustotal.com/reference/overview#file-scan)
    # [Exploring the VirusTotal API](https://www.tines.com/blog/virustotal-api-security-automation)
    # [Python: Virus Total Lookup Script](https://www.youtube.com/watch?v=D925hYZjKY0&t=359s)
    # [Virustotal Search GitHub Repo](https://github.com/eduardxyz/virustotal-search)
    # []()

#!/usr/bin/env python

# Import cross-platform modules
import os
import fnmatch
import hashlib
from datetime import datetime

# Define file_search function and arguements
def file_search(dir_name):
    # Initialize an empty list
    search_results = []
    # for loop iterates through directory and os.walk generates file names
    for dirpath, dirnames, filenames in os.walk(dir_name):
        # Nested loop iterates through file names in list
        for file in filenames:
            # Joins directory path with file name and stores in file_path variable
            file_path = os.path.join(dirpath, file)
            # Prints file found to terminal
            print(f"\nFile found: {file_path}")
            # Create MD5 hash object for MD5 hash computation
            md5_hash = hashlib.md5()
            # Opens file_path file in read binary mode
            with open(file_path,"rb") as f:
                # for loop reads file in 4096 byte chunks and hashes
                for byte_block in iter(lambda: f.read(4096),b""):
                    md5_hash.update(byte_block)
            # Prints results of hashing to terminal with file metadata
            print(f"MD5 Hash: {md5_hash.hexdigest()}\nTimestamp: {datetime.now()}\nFile Name: {file}\nFile Size: {os.path.getsize(file_path)}\nComplete File Path: {os.path.abspath(file_path)}")
            # Appends full path to file to search_results list
            search_results.append(file_path)  
    # Returns search_result list
    return search_results

while True:
    # Request user input for dir_name variable
    dir_name = str(input("\nPlease enter the directory for the files you would like to hash: "))
    # Declares files_found variable equal to results of file_search function
    files_found = file_search(dir_name)
    # Prints total files searched and found
    print("\nTotal files searched:", sum([len(files) for r, d, files in os.walk(dir_name)]))
    print("\nTotal files found:", len(files_found))
